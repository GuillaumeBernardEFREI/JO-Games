Index: shooting/cleaned_class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom math import *\r\nimport shooting.ran_gen as rg\r\n\r\nclass Screen(pygame.Surface):\r\n    def __init__(self):\r\n        size=1180,620\r\n        pygame.Surface.__init__(self,size)\r\n        self.screen=pygame.display.set_mode(size,pygame.RESIZABLE)\r\n\r\n\r\nclass Background(pygame.sprite.Sprite):\r\n    def __init__(self,path):\r\n        pygame.sprite.Sprite.__init__(self)\r\n        self.BD=pygame.image.load(path).convert()\r\n\r\n\r\nclass General_Game_Object(pygame.sprite.Sprite):\r\n    def __init__(self,img_path, **kargs):#*args and **kargs are if you don't want to have these values in all the classes but only in some that you created.\r\n        pygame.sprite.Sprite.__init__(self)\r\n        self.sprite=pygame.image.load(img_path).convert_alpha()#The convert alpha should make the transparent pixels in png really transparent in pygame.\r\n        if \"resize\" in kargs:\r\n            self.resize(kargs['resize'])\r\n\r\n    def resize(self,values:tuple[float,float]) -> None:\r\n        self.sprite = pygame.transform.scale(self.sprite,values)\r\n\r\n    def rect(self) ->pygame.rect:\r\n        return self.sprite.get_rect()\r\n    #rect is the position of the sprite.\r\n\r\nclass UFO(General_Game_Object):\r\n    def __init__(self,img_path):\r\n        General_Game_Object.__init__(self,img_path)\r\n        #to define the variables and not have errors.\r\n        self.x=-100\r\n        self.y=-100\r\n        \r\n\r\n    def gen_traj(self,scr_size:pygame.rect) -> None:\r\n        param=rg.gen_eq(scr_size)\r\n        acc=1\r\n        self.traj=Trajectory(False,param[0],param[1],acc*param[2],startpos=param[3])\r\n        self.time=0\r\n\r\n    def move(self,fps:int,screen_size:pygame.rect) -> None:\r\n        self.time+=1/fps\r\n        self.x,self.y=self.traj.position(self.time,True,screen_size)\r\n\r\n    def draw(self,screen:Screen) -> None:\r\n        screen.blit(self.sprite,[self.x,self.y])\r\n\r\n    def check(self,scr_size:pygame.rect) -> bool:\r\n        if not (-100<self.x<scr_size.right): return True\r\n        if not (-100<self.y<scr_size.bottom): return True\r\n        return False\r\n    \r\n    def check_click(self) -> bool:\r\n        mouse_pos=pygame.mouse.get_pos()\r\n        if (pygame.mouse.get_pressed()[0]) and (mouse_pos[0]-self.x)<75 and (mouse_pos[1]-self.y)<75: \r\n            return True\r\n        return False\r\n\r\n\r\nclass Trajectory:\r\n    def __init__(self,use_velocity_vector:bool,launchvelocity:float,angleoflaunch:float,aceleration:float=9.81,start_velocity:tuple=(1,1),startpos:tuple=(0,0)) -> None:\r\n        if use_velocity_vector:\r\n            self.launchvelo=sqrt(start_velocity[0]**2+start_velocity[1]**2) # pythagoras\r\n            self.ax=0 #The acceleration will only be the downward gravity for the moment (simplicity to understand)\r\n            self.bx=start_velocity[0]\r\n\r\n            self.ay=aceleration/2\r\n            self.by=start_velocity[1]\r\n        else:\r\n            self.launchvelo=launchvelocity\r\n            #because we use an euclidian system, we can consider the values beeing one of a right triangle.\r\n            self.ax=0\r\n            self.bx=launchvelocity*sin(angleoflaunch) #values are in radians\r\n\r\n            self.ay=aceleration/2\r\n            self.by=launchvelocity*cos(angleoflaunch) #angleoflaunch is in radians!\r\n\r\n        self.cx=startpos[0]\r\n        self.cy=startpos[1]\r\n\r\n        #This equation represents y(x) and time has been eliminated.\r\n        #The simplification is easy since we have chosen to have ax=0\r\n        self.a=self.ay/(self.bx**2)\r\n        self.b=-(2*self.ay)/(self.bx**2)      +self.by/(self.bx) #see calculations done on a sheet\r\n        self.c=(self.ay*(self.cx**2))/(self.bx**2)    -(self.by*self.cx)/(self.bx)      +self.cy\r\n\r\n        self.equation=f\"y(x)={self.a:8f}xÂ²+{self.b:8f}x+{self.c:8f}\" #the equation is of the form ax^2+bx+c\r\n                                # And the equation of this particular trajectory is stored into this string variable.\r\n                                #this equation is only to be displayed in dev menus not to be used.\r\n        self.startpos=startpos\r\n\r\n    #    x = horizontal motion\r\n    #    y = vertical motion\r\n\r\n    def position(self,time,fixed:bool=False,screen_size:tuple|None=None) -> list:\r\n        x=self.ax*(time**2)+self.bx*time\r\n        y=self.ay*(time**2)+self.by*time\r\n        if fixed: #The equation will be fixed to be calculated in a 10k*10k radius (only positive)\r\n                # And then we render it down to the size of the screen, done here.\r\n            if screen_size==None:\r\n                raise TypeError(\"You need to give the screen size to make the equation a fixed one.\")\r\n            x*=screen_size[2]/10000 #screen size is the rect of the screen.\r\n            y*=screen_size[3]/10000\r\n\r\n        x+=self.cx\r\n        y+=self.cy\r\n        return [x,y]\r\n    \r\n    def trajectory(self,nbpoints:int,starttime=0,maxtime=60,fixed:bool=False,screen_size:tuple|None=None)-> list[list]:\r\n        #maxtime is in seconds\r\n        values=list()\r\n        for i in range(starttime,nbpoints+1): #from time=0 to time=maxtime \r\n            time=i*maxtime/nbpoints\r\n            pos=self.position(time,fixed,screen_size)\r\n            values.append(pos)\r\n        return values
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shooting/cleaned_class.py b/shooting/cleaned_class.py
--- a/shooting/cleaned_class.py	(revision 423d90ca9ed411c885a8da487e9ae6dff4295b65)
+++ b/shooting/cleaned_class.py	(date 1714846926528)
@@ -97,7 +97,7 @@
     #    x = horizontal motion
     #    y = vertical motion
 
-    def position(self,time,fixed:bool=False,screen_size:tuple|None=None) -> list:
+    def position(self,time,fixed:bool=False,screen_size:tuple=None) -> list:
         x=self.ax*(time**2)+self.bx*time
         y=self.ay*(time**2)+self.by*time
         if fixed: #The equation will be fixed to be calculated in a 10k*10k radius (only positive)
@@ -111,7 +111,7 @@
         y+=self.cy
         return [x,y]
     
-    def trajectory(self,nbpoints:int,starttime=0,maxtime=60,fixed:bool=False,screen_size:tuple|None=None)-> list[list]:
+    def trajectory(self,nbpoints:int,starttime=0,maxtime=60,fixed:bool=False,screen_size:tuple=None)-> list[list]:
         #maxtime is in seconds
         values=list()
         for i in range(starttime,nbpoints+1): #from time=0 to time=maxtime 
Index: .idea/JO-Games.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/JO-Games.iml b/.idea/JO-Games.iml
new file mode 100644
--- /dev/null	(date 1714846411399)
+++ b/.idea/JO-Games.iml	(date 1714846411399)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1714846934018)
+++ b/.idea/misc.xml	(date 1714846934018)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.9" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1714846411426)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1714846411426)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
